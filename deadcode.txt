func writePacket2Pcap(rtpbuf []byte) {
	var err error
	// err = binary.Write(pcapFile, binary.LittleEndian, int32(len(buf)))
	// checkFatal(err)

	// err = binary.Write(pcapFile, binary.LittleEndian, int32(0))
	// checkFatal(err)

	// _, err = pcapFile.Write(buf)
	// checkFatal(err)

	// Let's craft network packets
	buf := gopacket.NewSerializeBuffer()

	opts := gopacket.SerializeOptions{
		FixLengths: true,
	}

	ethernetLayer := &layers.Ethernet{
		SrcMAC: []byte{0, 0, 0, 0, 0, 0},
		DstMAC: []byte{0, 0, 0, 0, 0, 0},
	}

	ethernetLayer.EthernetType = layers.EthernetTypeIPv4

	ipv4 := &layers.IPv4{
		Version: 4,
		SrcIP:   net.IP([]byte{127, 0, 0, 1}),
		DstIP:   net.IP([]byte{127, 0, 0, 1}),
		TTL:     128,
	}

	ipv4.Protocol = layers.IPProtocolUDP

	err = gopacket.SerializeLayers(buf, opts,
		ethernetLayer,
		ipv4,
		&layers.UDP{
			SrcPort: layers.UDPPort(1000),
			DstPort: layers.UDPPort(2000),
		},
		gopacket.Payload(rtpbuf),
	)
	checkFatal(err)

	ci := gopacket.CaptureInfo{
		Timestamp:      time.Now(),
		CaptureLength:  len(buf.Bytes()),
		Length:         len(buf.Bytes()),
		InterfaceIndex: 0,
		AncillaryData:  []interface{}{},
	}

	err = pcapWr.WritePacket(ci, buf.Bytes())
	checkFatal(err)
	// no flush needed, os.file is unbuffered

	// c := rtpdump.Packet{
	// 	Offset:  time.Since(startTime),
	// 	IsRTCP:  false,
	// 	Payload: buf,
	// }

	// err = rtpdumpWr.WritePacket(c)
	//checkFatal(err)
}

if *rtpdumpSave {
			var err error
			pcapFile, err = os.Create("deadsfu-out.pcap")
			checkFatal(err)

			pcapWr = pcapgo.NewWriter(pcapFile)
			err = pcapWr.WriteFileHeader(1600, layers.LinkTypeEthernet)
			checkFatal(err)

			// hdr := rtpdump.Header{
			// 	Start:  time.Now(),
			// 	Source: net.ParseIP("127.0.0.1"),
			// 	Port:   5042,
			// }
			// rtpdumpWr, err = rtpdump.NewWriter(a, hdr)
			// checkFatal(err)
		}



		// ReadPcap2RTP reads a pcapng into an array of packets
// no mutex needed
func ReadPcap2RTP(reader io.Reader) ([]rtp.Packet, []time.Time, error) {
	var pkts []rtp.Packet
	var timestamps []time.Time

	r, err := pcapgo.NewNgReader(reader, pcapgo.DefaultNgReaderOptions)
	if err != nil {
		return nil, nil, err
	}

	for {
		data, capinfo, err := r.ReadPacketData()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, nil, err
		}

		// Decode a packet
		packet := gopacket.NewPacket(data, layers.LayerTypeEthernet, gopacket.Default)

		udplayer := packet.Layer(layers.LayerTypeUDP)
		if udplayer == nil {
			panic("non-udp in pcap")
		}

		udp, _ := udplayer.(*layers.UDP)

		var p rtp.Packet
		err = p.Unmarshal(udp.Payload)
		if err != nil {
			return nil, nil, err
		}

		pkts = append(pkts, p)
		timestamps = append(timestamps, capinfo.Timestamp)
	}

	return pkts, timestamps, nil
}







func keyFrameHelper(payload []byte, mimetype string) bool {
	switch mimetype {

	case "video/VP8":
		vp8 := &VP8Helper{}
		err := vp8.Unmarshal(payload)
		if err != nil {
			elog.Println(err) //cam, malformed rtp is not fatal
		}
		return vp8.IsKeyFrame

	case "video/H264":
		return isH264Keyframe(payload)
	}
	panic("unhandled keyframe mimetype " + mimetype)
}




//  removed broadcast style track setup
	// oh oh oh, can add directions to this sendonly...
	// 	was 'broadcast' way:
	// XXX
	// the sfu appears ro work okay without this, using addtrack()
	//peerConnection.AddTransceiverFromKind(webrtc.RTPCodecTypeVideo)

	// Create Track that we send video back to browser on
	//just initializes a struct!
	// outputTrack, err := webrtc.NewTrackLocalStaticRTP(webrtc.RTPCodecCapability{MimeType: "video/vp8"}, "video_q", "pion_q")
	// if err != nil {
	// 	panic(err)
	// }

	// The pc.AddTrack() call replaces pc.AddTransceiverFromKind() from broadcast example
	// important concurrency note regarding the map assignment
	// other subscribers can't read this until:
	// ingestPresent is true, which is set later in this function
	// other publishers can't get here, cause this function
	// is protected by atomic.inc32(&x)
	// so this map write IS safe. there. I told you. I broke it down.

	//trackname := "main"
	// if ii > 0 && len(rids) > 0 {
	// 	trackname = rids[ii-1]
	// }
	// log.Println("using track name:", trackname)

	//outputTracks[trackname] = outputTrack
	// if _, err = peerConnection.AddTrack(outputTrack); err != nil {
	// // 	panic(err)
	// // }
	// xinit := webrtc.RtpTransceiverInit{Direction: webrtc.RTPTransceiverDirectionSendonly}
	// // AddTransceiverFromTrack only looks at the direction, not the SendEncodings field
	// if _, err = peerConnection.AddTransceiverFromTrack(outputTrack, xinit); err != nil {
	// 	panic(err)
	// }
	//}

	//++ from simulcast
	// Set a handler for when a new remote track starts

	
	//https://tools.ietf.org/html/draft-ietf-mmusic-rid-15#section-4
	// a=rid:<rid-id> <direction> [pt=<fmt-list>;]<restriction>=<value>...
	// 	a=rid:f send
	// a=rid:h send
	// a=rid:q send
	// a=simulcast:send f;h;q

	//	rids := make([]string, 0)

	// for ii, md := range ofrsd.MediaDescriptions {
	// 	fmt.Println(" mediadesc %d", ii)
	// 	//spew.Dump(md)
	// 	if val, ok := md.Attribute("simulcast"); ok {
	// 		log.Println("has simulcast, val = ", val)

	// 		for _, at := range md.Attributes {
	// 			if at.Key == "rid" {
	// 				log.Println(" key/rid value=", at.Value)
	// 				ridx := strings.Split(at.Value, " ")
	// 				if len(ridx) > 2 {
	// 					panic("rid sdp line too complex")
	// 				}
	// 				if ridx[1] != "send" {
	// 					panic("rid sdp line not send")
	// 				}
	// 				rids = append(rids, ridx[0])
	// 			}
	// 		}
	// 		continue
	// 	}

	log.Println("adding mediadesc")



// SpliceRTP takes RTP from a number of different sources, and
// allows switching between the RTP streams while fixing the RTP timestamps and sequence numbers
// to be continuous.
// Sequence numbers are easy.
// Timestamps are tricky, and could likely be improved (see comments on regression, use TS edge)
//
func (s *RtpSplicer) SpliceRTPOld(o *rtp.Packet, src RtpSource, now time.Time, rtphz int) (r *rtp.Packet) {

	s.mu.Lock()
	defer s.mu.Unlock()

	activeSSRCHasChanged := s.active == src && s.lastSentValid && r.SSRC != s.activeSSRC

	if s.pending == src || activeSSRCHasChanged {

		iskeyframe := ContainSPS(r.Payload)
		//tsedge := s.lastPendingSSRC != p.SSRC || s.lastPendingTS != p.Timestamp
		//s.lastPendingSSRC = p.SSRC
		//s.lastPendingTS = p.Timestamp

		if iskeyframe || activeSSRCHasChanged {
			// Transition between RTP streams
			s.subtractSeqno = r.SequenceNumber - s.lastSentSeqno - 1

			// XXX we currently use the last packet as the time reference to
			// compute the delta for adjusting the new source's timestamps.
			// we should consider creating s.lastTSEdgeTime, which might give a better estimage
			// we also might consider doing linear regression to compute the Y-offset (slope is known)
			// (using multiple points, not just a single point)
			// so, I guess we are basically doing one-point regression with known slope, but unknown Y-axis
			ticks := now.Sub(s.lastSentTime) * time.Duration(rtphz) / time.Second
			s.subtractTS = r.Timestamp - s.lastSentTS - uint32(ticks)

			s.active = src
			s.pending = None

			s.activeSSRC = o.SSRC
			s.lastSentSeqno = o.SequenceNumber
			s.lastSentTS = o.Timestamp
			s.lastSentTime = now

		}
	} else if s.active == src {
		s.activeSSRC = o.SSRC
		s.lastSentSeqno = o.SequenceNumber
		s.lastSentTS = o.Timestamp
		s.lastSentTime = now

		r.SequenceNumber -= s.subtractSeqno
		r.Timestamp -= s.subtractTS
		return r
	}
	return nil
}




// 04 27 21 tricks to find frequency


	//tsFrequencyDelta []FrequencyPair


// findMostFrequentDelta is used to find inter-frame period
// not-mutexed on purpose, only called from inside mutexed func
// func (s *RtpSplicer) findMostFrequentDelta(fallback uint32) (delta uint32) {
// 	var n uint64

// 	for i, v := range s.tsFrequencyDelta {

// 		log.Println("findMostFrequentDelta:", i, v.count, v.delta)

// 		if v.count >= n {
// 			n = v.count
// 			delta = v.delta
// 		}
// 	}
// 	if n > 2 {
// 		log.Println("rtpsplice: findMostFrequentDelta, clockDelta from observations:", delta)
// 		return delta
// 	} else {
// 		log.Println("rtpsplice: findMostFrequentDelta, clockDelta from fallback:", fallback)
// 		return fallback
// 	}
// }

// not-mutexed on purpose, only called from inside mutexed func
// func (s *RtpSplicer) trackTimestampDeltas(delta uint32) {
// 	// classic insert into sorted set  https://golang.org/pkg/sort/#Search

// 	//log.Println(delta)
// 	i := sort.Search(len(s.tsFrequencyDelta), func(i int) bool { return s.tsFrequencyDelta[i].delta <= delta })
// 	if i < len(s.tsFrequencyDelta) && s.tsFrequencyDelta[i].delta == delta {
// 		s.tsFrequencyDelta[i].count++
// 	} else {
// 		// x is not present in data,
// 		// but i is the index where it would be inserted.
// 		// go slice tricks! https://github.com/golang/go/wiki/SliceTricks#insert
// 		s.tsFrequencyDelta = append(s.tsFrequencyDelta, FrequencyPair{})
// 		copy(s.tsFrequencyDelta[i+1:], s.tsFrequencyDelta[i:])
// 		s.tsFrequencyDelta[i] = FrequencyPair{delta: delta, count: 0}
// 	}
// }



func getMyIPFromRedis(ctx context.Context) net.IP {
	rconn, err := redisPool.GetContext(ctx)
	checkFatal(err)
	defer rconn.Close()

	line, err := redigo.String(rconn.Do("client", "info"))
	checkFatal(err)

	hostport := ""
	redisid := int64(0)

	n, err := fmt.Sscanf(line, "id=%d addr=%s ", &redisid, &hostport)
	checkFatal(err)

	if n != 2 {
		checkFatal(fmt.Errorf("unable to get IP from redis clientline:%v", line))
	}

	host, _, err := net.SplitHostPort(hostport)
	checkFatal(err)

	ipaddr := net.ParseIP(host)
	if ipaddr == nil {
		checkFatal(fmt.Errorf("unable to get ip address from redis: %s", line))
	}
	return ipaddr
}


// sdpHandler
// This allows answer/offer SDPs to be posted to /
// and then routed to subHandler or pubHandler
// it might make it simpler for new developers, they
// can just post their SDPs to /, instead of /sub or /pub
// BUT it might make debugging tricker, because
// if they don't get their sendonly attributes on the
// publisher-SDP correct, this code won't
// route the request to the correct place.
// **Do not integrate for that reason at this time.**
//
var _ = sdpHandler

func sdpHandler(wrappedHandler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		if r.Method != "POST" || r.URL.Path != "/" {
			wrappedHandler.ServeHTTP(w, r)
			return
		}

		buf, err := ioutil.ReadAll(r.Body)
		if err != nil {
			teeErrorStderrHttp(w, err)
			return
		}

		// https://stackoverflow.com/a/23077519/86375
		r.Body = ioutil.NopCloser(bytes.NewBuffer(buf))

		// do my checking
		{
			str := string(buf)

			sdpSignature := strings.HasPrefix(str, "v=0")
			if sdpSignature {
				pline()

				rtcsd := &webrtc.SessionDescription{}

				sd, err := rtcsd.Unmarshal()
				if err != nil {
					teeErrorStderrHttp(w, err)
					return
				}

				sendonly := true

				for _, v := range sd.MediaDescriptions {
					_, ok := v.Attribute("sendonly")
					sendonly = sendonly && ok
				}

				if sendonly {
					pline()
					commonPubSubHandler(pubHandler)
					return
				} else {
					pline()
					commonPubSubHandler(subHandler)
					return
				}

			}

		}

		wrappedHandler.ServeHTTP(w, r)

	})
}

func mstime() string {
	const timeformatutc = "2006-01-02T15:04:05.000Z07:00"
	return time.Now().UTC().Format(timeformatutc)
}



ch := make(chan MsgPCResult)

	// send to singlePeerConnMaker
	newPCCh <- MsgNewPCReq{
		url: req.URL.Path,
		sdp: offer,
		ch:  ch,
	}

	println(990)
	peerConnResult := <-ch
	println(991)
	if peerConnResult.err != nil {
		elog.Println(peerConnResult.err.Error())
		http.Error(w, peerConnResult.err.Error(), http.StatusInternalServerError)
		return
	} else if peerConnResult.sdp != nil {
		w.Header().Set("Content-Type", "application/sdp")
		w.WriteHeader(201)
		_, err = w.Write(peerConnResult.sdp)
		checkFatal(err) // cam/if this write fails, then fail hard!
		//NOTE, Do NOT ever use http.error to return SDPs
	} else {
		panic("no")
	}



	if false {
		mux.HandleFunc("/ipv4", func(rw http.ResponseWriter, r *http.Request) {
			x, err := getDefRouteIntfAddrIPv4()
			if err == nil {
				_, _ = rw.Write([]byte(x.String()))
			}
		})
		mux.HandleFunc("/ipv6", func(rw http.ResponseWriter, r *http.Request) {
			x, err := getDefRouteIntfAddrIPv6()
			if err == nil {
				_, _ = rw.Write([]byte(x.String()))
			}
		})

	}